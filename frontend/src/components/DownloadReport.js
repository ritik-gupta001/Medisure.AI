import React, { useState } from 'react';
import { useTheme } from '../contexts/ThemeContext';
import apiService from '../services/api';

const DownloadReport = ({ analysis, patientName = 'Patient', style = {} }) => {
  const { currentColors } = useTheme();
  const [isDownloading, setIsDownloading] = useState(false);
  const [downloadFormat, setDownloadFormat] = useState('pdf');

  const generateReportContent = () => {
    const timestamp = new Date().toLocaleString();
    const reportTitle = `Medical Analysis Report - ${patientName}`;
    
    // Extract key information from analysis
    const summary = analysis?.summary || analysis?.patient_summary?.summary || 'Medical analysis completed';
    const findings = analysis?.findings || analysis?.patient_summary?.key_findings || [];
    const recommendations = analysis?.recommendations || analysis?.patient_summary?.recommendations || [];
    const riskAssessment = analysis?.risk_assessment || analysis?.patient_summary?.risk_analysis || {};
    
    return {
      title: reportTitle,
      timestamp,
      summary,
      findings,
      recommendations,
      riskAssessment,
      rawAnalysis: analysis
    };
  };

  const downloadAsJSON = () => {
    const reportData = generateReportContent();
    const dataStr = JSON.stringify(reportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `medical-report-${patientName.replace(/\s+/g, '-')}-${Date.now()}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const downloadAsTXT = () => {
    const reportData = generateReportContent();
    let content = `${reportData.title}\n`;
    content += `Generated on: ${reportData.timestamp}\n`;
    content += `=${'='.repeat(50)}\n\n`;
    
    content += `SUMMARY:\n${reportData.summary}\n\n`;
    
    if (reportData.findings && reportData.findings.length > 0) {
      content += `FINDINGS:\n`;
      reportData.findings.forEach((finding, index) => {
        if (typeof finding === 'string') {
          content += `${index + 1}. ${finding}\n`;
        } else if (finding.description) {
          content += `${index + 1}. ${finding.description}: ${finding.value || 'N/A'} - ${finding.interpretation || 'No interpretation'}\n`;
        }
      });
      content += `\n`;
    }
    
    if (reportData.riskAssessment && reportData.riskAssessment.overall_risk) {
      content += `RISK ASSESSMENT:\n`;
      content += `Overall Risk: ${reportData.riskAssessment.overall_risk}\n`;
      if (reportData.riskAssessment.risk_percentage) {
        content += `Risk Percentage: ${reportData.riskAssessment.risk_percentage}%\n`;
      }
      if (reportData.riskAssessment.risk_factors && reportData.riskAssessment.risk_factors.length > 0) {
        content += `Risk Factors:\n`;
        reportData.riskAssessment.risk_factors.forEach((factor, index) => {
          content += `  - ${factor}\n`;
        });
      }
      content += `\n`;
    }
    
    if (reportData.recommendations && reportData.recommendations.length > 0) {
      content += `RECOMMENDATIONS:\n`;
      reportData.recommendations.forEach((rec, index) => {
        content += `${index + 1}. ${rec}\n`;
      });
    }
    
    content += `\n${'='.repeat(50)}\n`;
    content += `Report generated by MediSense AI\n`;
    content += `For medical decisions, please consult with a qualified healthcare professional.\n`;
    
    const dataBlob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `medical-report-${patientName.replace(/\s+/g, '-')}-${Date.now()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const downloadAsPDF = async () => {
    try {
      // For PDF generation, we'll use a backend endpoint or client-side library
      // For now, let's create a formatted HTML that can be printed as PDF
      const reportData = generateReportContent();
      
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <title>${reportData.title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            .header { text-align: center; border-bottom: 2px solid #3b82f6; padding-bottom: 20px; margin-bottom: 30px; }
            .section { margin-bottom: 30px; }
            .section-title { font-size: 18px; font-weight: bold; color: #3b82f6; margin-bottom: 10px; }
            .finding { margin-bottom: 10px; padding: 10px; background-color: #f8fafc; border-left: 4px solid #3b82f6; }
            .risk-high { border-left-color: #ef4444; }
            .risk-moderate { border-left-color: #f59e0b; }
            .risk-low { border-left-color: #10b981; }
            .footer { margin-top: 50px; text-align: center; font-size: 12px; color: #6b7280; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${reportData.title}</h1>
            <p>Generated on: ${reportData.timestamp}</p>
          </div>
          
          <div class="section">
            <div class="section-title">SUMMARY</div>
            <p>${reportData.summary}</p>
          </div>
          
          ${reportData.findings && reportData.findings.length > 0 ? `
          <div class="section">
            <div class="section-title">FINDINGS</div>
            ${reportData.findings.map((finding, index) => {
              if (typeof finding === 'string') {
                return `<div class="finding">${index + 1}. ${finding}</div>`;
              } else if (finding.description) {
                const riskClass = finding.severity === 'critical' || finding.severity === 'severe' ? 'risk-high' : 
                                finding.severity === 'moderate' ? 'risk-moderate' : 'risk-low';
                return `<div class="finding ${riskClass}">
                  <strong>${finding.description}</strong>: ${finding.value || 'N/A'}<br>
                  <em>${finding.interpretation || 'No interpretation available'}</em>
                </div>`;
              }
              return '';
            }).join('')}
          </div>
          ` : ''}
          
          ${reportData.riskAssessment && reportData.riskAssessment.overall_risk ? `
          <div class="section">
            <div class="section-title">RISK ASSESSMENT</div>
            <p><strong>Overall Risk:</strong> ${reportData.riskAssessment.overall_risk}</p>
            ${reportData.riskAssessment.risk_percentage ? `<p><strong>Risk Percentage:</strong> ${reportData.riskAssessment.risk_percentage}%</p>` : ''}
            ${reportData.riskAssessment.risk_factors && reportData.riskAssessment.risk_factors.length > 0 ? `
              <p><strong>Risk Factors:</strong></p>
              <ul>
                ${reportData.riskAssessment.risk_factors.map(factor => `<li>${factor}</li>`).join('')}
              </ul>
            ` : ''}
          </div>
          ` : ''}
          
          ${reportData.recommendations && reportData.recommendations.length > 0 ? `
          <div class="section">
            <div class="section-title">RECOMMENDATIONS</div>
            <ol>
              ${reportData.recommendations.map(rec => `<li>${rec}</li>`).join('')}
            </ol>
          </div>
          ` : ''}
          
          <div class="footer">
            <p>Report generated by MediSense AI</p>
            <p>For medical decisions, please consult with a qualified healthcare professional.</p>
          </div>
        </body>
        </html>
      `;
      
      const dataBlob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(dataBlob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `medical-report-${patientName.replace(/\s+/g, '-')}-${Date.now()}.html`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      // Open in new window for PDF printing
      const printWindow = window.open(url, '_blank');
      if (printWindow) {
        printWindow.onload = () => {
          setTimeout(() => {
            printWindow.print();
          }, 500);
        };
      }
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF. Please try downloading as TXT instead.');
    }
  };

  const handleDownload = async () => {
    if (!analysis) {
      alert('No analysis data available to download');
      return;
    }

    setIsDownloading(true);
    try {
      switch (downloadFormat) {
        case 'pdf':
          await downloadAsPDF();
          break;
        case 'txt':
          downloadAsTXT();
          break;
        case 'json':
          downloadAsJSON();
          break;
        default:
          downloadAsTXT();
      }
    } catch (error) {
      console.error('Download error:', error);
      alert('Failed to download report. Please try again.');
    } finally {
      setIsDownloading(false);
    }
  };

  return (
    <div style={{
      display: 'flex',
      alignItems: 'center',
      gap: '12px',
      ...style
    }}>
      {/* Format Selector */}
      <select
        value={downloadFormat}
        onChange={(e) => setDownloadFormat(e.target.value)}
        style={{
          padding: '8px 12px',
          borderRadius: '8px',
          border: `1px solid ${currentColors.border}`,
          background: currentColors.surface,
          color: currentColors.text.primary,
          fontSize: '14px',
          cursor: 'pointer'
        }}
      >
        <option value="pdf">PDF Report</option>
        <option value="txt">Text Report</option>
        <option value="json">JSON Data</option>
      </select>

      {/* Download Button */}
      <button
        onClick={handleDownload}
        disabled={isDownloading || !analysis}
        style={{
          display: 'flex',
          alignItems: 'center',
          gap: '8px',
          padding: '10px 16px',
          borderRadius: '8px',
          border: 'none',
          background: analysis ? currentColors.primary : currentColors.border,
          color: analysis ? '#ffffff' : currentColors.text.secondary,
          fontSize: '14px',
          fontWeight: '500',
          cursor: analysis ? 'pointer' : 'not-allowed',
          transition: 'all 0.3s ease',
          opacity: isDownloading ? 0.7 : 1
        }}
        onMouseEnter={(e) => {
          if (analysis && !isDownloading) {
            e.target.style.transform = 'translateY(-1px)';
            e.target.style.boxShadow = `0 4px 12px ${currentColors.shadow}`;
          }
        }}
        onMouseLeave={(e) => {
          if (analysis && !isDownloading) {
            e.target.style.transform = 'translateY(0)';
            e.target.style.boxShadow = 'none';
          }
        }}
      >
        {isDownloading ? (
          <>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" className="animate-spin">
              <path d="M12 2v4m0 12v4m10-10h-4M6 12H2m15.364-6.364l-2.828 2.828M8.464 8.464L5.636 5.636m12.728 12.728l-2.828-2.828M8.464 15.536l-2.828 2.828" 
                    stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" fill="none"/>
            </svg>
            Downloading...
          </>
        ) : (
          <>
            <svg width="16" height="16" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2.25a.75.75 0 01.75.75v11.69l3.22-3.22a.75.75 0 111.06 1.06l-4.5 4.5a.75.75 0 01-1.06 0l-4.5-4.5a.75.75 0 111.06-1.06L11.25 14.69V3a.75.75 0 01.75-.75zM3.75 17.25a.75.75 0 01.75-.75h15a.75.75 0 010 1.5h-15a.75.75 0 01-.75-.75z"/>
            </svg>
            Download Report
          </>
        )}
      </button>
    </div>
  );
};

export default DownloadReport;